{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","None","sortMethod","setSortMethod","isReversed","setIsReversed","visibleGoods","goods","sortedGoods","sort","good1","good2","Alphabetically","localeCompare","Length","length","reverse","sortGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,QAAAA,E,gCAAAA,E,iBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAoCC,mBAASH,EAASI,MAAtD,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACMC,EAhCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAW,YAAOD,GAqBxB,OAnBIL,GACFM,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQT,GACN,KAAKL,EAASe,eACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXX,GACFI,EAAYQ,UAGPR,EAMcS,CAAUnB,EAAiBI,EAAYE,GAO5D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYlB,IAAeL,EAASe,iBAExCS,QAAS,kBAAMlB,EAAcN,EAASe,iBAPxC,iCAYA,wBACEO,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYlB,IAAeL,EAASiB,SAExCO,QAAS,kBAAMlB,EAAcN,EAASiB,SAPxC,4BAYA,wBACEK,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAahB,IAEjBiB,QAAS,kBAAMhB,GAAeD,IAPhC,sBAYEF,GAAcE,IACd,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAhDS,WACjBlB,EAAcN,EAASI,MACvBI,GAAc,IA2CR,sBAUJ,6BACGC,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YClHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.72f39d4b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  None = '',\n  Alphabetically = 'alphabetically',\n  Length = 'length',\n}\n\nfunction sortGoods(\n  goods: string[],\n  sortMethod: SortType,\n  isReversed: boolean,\n): string[] {\n  const sortedGoods = [...goods];\n\n  if (sortMethod) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortMethod) {\n        case SortType.Alphabetically:\n          return good1.localeCompare(good2);\n\n        case SortType.Length:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    sortedGoods.reverse();\n  }\n\n  return sortedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortMethod, setSortMethod] = useState(SortType.None);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = sortGoods(goodsFromServer, sortMethod, isReversed);\n\n  const resetGoods = () => {\n    setSortMethod(SortType.None);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortMethod !== SortType.Alphabetically },\n          )}\n          onClick={() => setSortMethod(SortType.Alphabetically)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortMethod !== SortType.Length },\n          )}\n          onClick={() => setSortMethod(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortMethod || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetGoods}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}